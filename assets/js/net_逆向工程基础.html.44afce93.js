"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[8111],{14379:(s,i,t)=>{t.r(i),t.d(i,{comp:()=>g,data:()=>p});var n=t(52661);const l=t.p+"assets/img/image-20250712140755-ngx9ei6.d814cb6b.png",e=t.p+"assets/img/image-20250712140902-ggdpkgi.0b66c9f9.png",a=t.p+"assets/img/image-20250712141054-402eogz.b22c5eaa.png",r=t.p+"assets/img/image-20250712142011-pgoedo1.08bb0eee.png",d=t.p+"assets/img/image-20250712142305-z9l1n2s.d1f94554.png",h=t.p+"assets/img/image-20250712142356-emwi0qy.42c1be93.png",o={},g=(0,t(61792).A)(o,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<h1 id="逆向工程" tabindex="-1"><a class="header-anchor" href="#逆向工程"><span>逆向工程</span></a></h1><h2 id="一、逆向工程定义" tabindex="-1"><a class="header-anchor" href="#一、逆向工程定义"><span>一、逆向工程定义</span></a></h2><p>逆向工程（Software Reverse Engineering），又称软件反向工程，从可运行的程序系统出发，运用解密、反汇编、系统分析、程序算法理解等多种计算机技术，对软件的结构、流程、代码等进行逆向拆解和分析，推导软件产品的源代码、设计原理、结构、算法、处理过程、运行方法及相关文档等。</p><h2 id="二、ctf竞赛中的逆向" tabindex="-1"><a class="header-anchor" href="#二、ctf竞赛中的逆向"><span>二、CTF竞赛中的逆向</span></a></h2><ul><li>涉及Windows、Linux、Android平台的多种编程技术。</li><li>要求利用常用工具对源代码及二进制文件进行逆向分析。</li><li>掌握Android移动应用APK文件的逆向分析，掌握加解密、内核编程、算法反调试和代码混淆技术。</li></ul><h2 id="三、逆向工程的用途" tabindex="-1"><a class="header-anchor" href="#三、逆向工程的用途"><span>三、逆向工程的用途</span></a></h2><ol><li>逆向分析已编译软件，用高级语言重现。</li><li>分析病毒，提取特征码，开发杀毒程序。</li><li>高级代码审计，在汇编层面调试审计程序。</li><li>用于游戏外挂、反外挂及破解软件。</li><li>分析挖掘嵌入式设备中的漏洞。</li></ol><h2 id="四、静态分析技术" tabindex="-1"><a class="header-anchor" href="#四、静态分析技术"><span>四、静态分析技术</span></a></h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p>在不执行计算机程序的条件下，对源代码进行分析，找出代码缺陷。一般利用静态程序分析工具将二进制的可执行文件翻译成汇编代码或C语言伪代码，通过对代码的分析来破解软件。</p><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><ol><li>直接面向源码，可分析多种问题。</li><li>能检测所有代码级别可执行路径组合，快速且准确。</li><li>无需执行程序，不会被恶意代码攻击。</li></ol><h2 id="五、动态调试技术" tabindex="-1"><a class="header-anchor" href="#五、动态调试技术"><span>五、动态调试技术</span></a></h2><h3 id="定义-1" tabindex="-1"><a class="header-anchor" href="#定义-1"><span>定义</span></a></h3><p>与静态分析技术相对，破解者利用调试器跟踪软件的运行，寻求破解路径。通过观察程序运行过程中的状态（如寄存器内容、函数输入输出、内存使用情况等），分析函数功能，明确代码逻辑，挖掘可能存在的漏洞，特别关注代码流和数据流。</p><h3 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1"><span>优点</span></a></h3><ol><li>更好地判断程序执行流程。</li><li>可跟踪数据流走向，如用户名口令、验证码等在程序执行中的流向。</li><li>程序装载到内存后，能够分析内存地址信息。</li><li>便于理解和修改程序，可更改标志位的值，修改程序走向。</li></ol><p>​​</p><h1 id="程序壳" tabindex="-1"><a class="header-anchor" href="#程序壳"><span>程序壳</span></a></h1><h3 id="一-定义与本质" tabindex="-1"><a class="header-anchor" href="#一-定义与本质"><span>一. 定义与本质</span></a></h3><p>程序壳（Software Packer）指包裹在原始程序外层的保护性代码层，其核心功能包括：</p><ul><li>代码保护：防止反编译、逆向分析和非法修改</li><li>运行控：程序加载时率先获得执行权（控制权劫持）</li><li>内存管理 ：负责在内存中解密/解压原始程序</li></ul><h3 id="二-加壳原理" tabindex="-1"><a class="header-anchor" href="#二-加壳原理"><span>二. 加壳原理</span></a></h3><div class="language-mermaid line-numbers-mode" data-highlighter="shiki" data-ext="mermaid" data-title="mermaid" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">graph LR</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">A[原始程序] --&gt; B[加壳处理]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">B --&gt; C{压缩/加密算法}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">C --&gt; D[生成外壳代码]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">D --&gt; E[加壳程序]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>技术本质</strong>：通过算法变换（压缩/加密/混淆）重构可执行文件</li><li><strong>内存加载</strong>：运行时在内存中动态还原原始程序（对用户透明）</li><li><strong>保护特性</strong>：加壳后程序可运行但无法直接查看源码</li></ul><h2 id="三、壳的分类与技术对比" tabindex="-1"><a class="header-anchor" href="#三、壳的分类与技术对比"><span>三、壳的分类与技术对比</span></a></h2><table><thead><tr><th>类型</th><th>代表工具</th><th>核心技术</th><th>主要目的</th><th>典型特征</th></tr></thead><tbody><tr><td><strong>压缩壳</strong></td><td>UPX, ASPack</td><td>LZMA/APLIB压缩算法</td><td>减小文件体积</td><td>高压缩率，易脱壳</td></tr><tr><td><strong>加密壳</strong></td><td>VMProtect, Themida</td><td>反调试+代码虚拟化+多态变形</td><td>防止逆向分析</td><td>强保护性，脱壳难度极高</td></tr><tr><td><strong>保护壳</strong></td><td>Armadillo, SE</td><td>授权校验+代码签名+自修改代码(SMC)</td><td>软件授权+防篡改</td><td>商业软件常用</td></tr></tbody></table><ol><li><p><strong>加密壳核心技术</strong>：</p><ul><li><strong>反调试技术</strong>：检测调试器存在（如<code>IsDebuggerPresent</code>​ API拦截）</li><li><strong>代码虚拟化</strong>：将x86指令转换为自定义字节码（VM虚拟机保护）</li><li><strong>多态引擎</strong>：每次加壳生成不同二进制结构（相同功能）</li><li><strong>IAT加密</strong>：隐藏导入函数表（Import Address Table）</li></ul></li><li><p><strong>进阶保护形态</strong>：</p><ul><li><strong>多层嵌套壳</strong>：多重加壳（如压缩壳+加密壳组合）</li><li><strong>动态壳</strong>：运行时下载解密密钥（需网络验证）</li><li><strong>虚拟机保护壳</strong>：将关键代码转换为虚拟机指令（如VMProtect）</li></ul></li></ol><h1 id="编译原理" tabindex="-1"><a class="header-anchor" href="#编译原理"><span>编译原理</span></a></h1><h2 id="一、编译全过程总览" tabindex="-1"><a class="header-anchor" href="#一、编译全过程总览"><span>一、编译全过程总览</span></a></h2><div class="language-mermaid line-numbers-mode" data-highlighter="shiki" data-ext="mermaid" data-title="mermaid" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">graph LR</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">A[源程序] --&gt; B[预处理]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">B --&gt; C[编译]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">C --&gt; D[汇编]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">D --&gt; E[链接]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">E --&gt; F[可执行程序]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、核心步骤" tabindex="-1"><a class="header-anchor" href="#二、核心步骤"><span>二、核心步骤</span></a></h2><h3 id="_1-预处理-preprocessing" tabindex="-1"><a class="header-anchor" href="#_1-预处理-preprocessing"><span>1. 预处理（Preprocessing）</span></a></h3><p><strong>核心任务</strong>：</p><ul><li>处理<code>#include</code>​指令：将头文件内容包含到源文件。</li><li>宏替换：展开<code>#define</code>​定义的宏</li><li>条件编译：处理<code>#ifdef/#endif</code>​等指令。条件编译指令将决定哪 些代码被编译，而哪些不被编译的。可以根据表达式的值或者某个特定的宏是否被定义来确定编译条件。</li><li>删除注释</li></ul><p><strong>操作原理</strong>：</p><p><img src="'+l+'" alt="hello.c" loading="lazy">​</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 原始代码 </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> PI</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3.14</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;math.h&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() { </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> PI </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 计算直径 </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 预处理后 </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* math.h 内容插入 */</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3.14</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong>：<code>.i</code>​文件（C）或<code>.ii</code>​文件（C++）</p><p><img src="'+e+'" alt="hello.i" loading="lazy">​</p><h3 id="_2-编译-compilation" tabindex="-1"><a class="header-anchor" href="#_2-编译-compilation"><span>2. 编译（Compilation）</span></a></h3><p><strong>核心任务</strong>：</p><ul><li><p><strong>词法分析</strong>：将字符流转换为词法单元（Token）序列<br> *输入：<code>position = initial + rate * 60</code>​<br> *输出：<code>[id,1] [=] [id,2] [+] [id,3] [*] [60]</code>​</p></li><li><p><strong>语法分析</strong>：构建抽象语法树（AST）</p><div class="language-mermaid line-numbers-mode" data-highlighter="shiki" data-ext="mermaid" data-title="mermaid" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">graph TD </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  A[=] --&gt; B[position]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  A --&gt; C[ ＋ ]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  C --&gt; D[initial]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  C --&gt; E[ × ]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  E --&gt; F[rate]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  E --&gt; G[60]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>语义分析</strong>：类型检查、作用域验证<br><em>例：检测</em>​<em>​<code>int + string</code>​</em>​<em>类型错误</em></p></li><li><p><strong>中间代码生成</strong>：生成三地址码或字节码<br> ​<code>t1 = rate * 60; t2 = initial + t1; position = t2</code>​</p></li></ul><p><strong>操作原理</strong>：<br> 基于上下文无关文法（2型文法）进行推导，使用LL/LR算法解析语法结构</p><p><img src="'+a+'" alt="hello.i编译为hello.s" loading="lazy">​</p><h3 id="_3-汇编-assembly" tabindex="-1"><a class="header-anchor" href="#_3-汇编-assembly"><span>3. 汇编（Assembly）</span></a></h3><p><strong>核心任务</strong>：</p><ul><li>将中间代码转换为目标机器指令</li><li>生成符号表（Symbol Table）记录变量/函数地址</li><li>生成重定位信息</li></ul><p><strong>操作原理</strong>：</p><div class="language-assembly line-numbers-mode" data-highlighter="shiki" data-ext="assembly" data-title="assembly" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>; x86示例</span></span>\n<span class="line"><span>mov eax, [rate]   ; 加载rate值 </span></span>\n<span class="line"><span>imul eax, 60      ; 乘以60</span></span>\n<span class="line"><span>add eax, [initial] ; 加initial</span></span>\n<span class="line"><span>mov [position], eax ; 存储结果</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong>：<code>.o</code>​目标文件（ELF/Mach-O格式）</p><p><img src="'+r+'" alt="image" loading="lazy">​</p><h3 id="_4-链接-linking" tabindex="-1"><a class="header-anchor" href="#_4-链接-linking"><span>4. 链接（Linking）</span></a></h3><p><strong>核心任务</strong>：</p><ul><li><strong>符号解析</strong>：匹配函数/变量引用与定义</li><li><strong>重定位</strong>：修正指令中的内存地址</li><li><strong>库整合</strong>：链接静态库（<code>.a</code>​）或动态库（<code>.so</code>​/<code>.dll</code>​）</li></ul><p><strong>操作原理</strong>：</p><div class="language-mermaid line-numbers-mode" data-highlighter="shiki" data-ext="mermaid" data-title="mermaid" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">graph LR </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">A[main.o] --&gt; C[链接器]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">B[libc.so] --&gt; C</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">C --&gt; D[a.out]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>动态链接示例</em>：<code>printf</code>​函数在运行时从<code>libc.so.6</code>​ 加载</p><p><img src="'+d+'" alt="链接后文件" loading="lazy">​</p><p><img src="'+h+'" alt="hello.out" loading="lazy">​</p><h1 id="寄存器概述" tabindex="-1"><a class="header-anchor" href="#寄存器概述"><span>寄存器概述</span></a></h1><p>寄存器是CPU内部的高速存储单元，访问速度比内存快得多，单位空间的价格也比内存高很多（内存又比硬盘贵）。</p><h2 id="常用寄存器分类" tabindex="-1"><a class="header-anchor" href="#常用寄存器分类"><span>常用寄存器分类</span></a></h2><p>常用的寄存器分为4类，分别是8个通用寄存器、6个段寄存器、1个标志寄存器和1个指令指针寄存器。</p><h2 id="_1-数据寄存器" tabindex="-1"><a class="header-anchor" href="#_1-数据寄存器"><span>1. 数据寄存器</span></a></h2><ul><li><p><strong>组成</strong>：包括EAX、EBX、ECX、EDX。</p></li><li><p><strong>特点</strong>：主要用于各种运算和数据的传送，每个数据寄存器都可以作为一个32位、16位或8位来使用。</p><ul><li>以EAX寄存器为例：它可以存储32位的数据，其低16位表示为AX，可存储16位的数据；AX又可分为AH和AL两个8位的寄存器，AH对应AX的高8位，AL对应AX的低8位。</li><li><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">+----------------+----------------+----------------+----------------+</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">位31</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ~</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 位16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">位15</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ~</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 位0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">位7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ~</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 位0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">位15</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ~</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 位8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      |</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">+----------------+----------------+----------------+----------------+</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">未命名（高16位）</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AX（低16位）</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AL（低8位）</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AH（高8位）</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      |</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">+----------------+----------------+----------------+----------------+</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MOV</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> EAX,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x12345678</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EAX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0x12345678（32位）</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MOV</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> AX,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x5678</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       ; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EAX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0x12345678（仅修改低16位）</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MOV</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> AL,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x78</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         ; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EAX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0x12345778（仅修改低8位）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>用途</strong>：</p><ul><li>EAX：称为累加器，常用于很多算术运算。</li><li>EBX：基地址寄存器，在内存寻址时存放基地址。</li><li>ECX：计数器，用于保存循环的索引（即循环次数）。</li><li>EDX：用于存放整数除法产生的余数。</li></ul></li></ul><p><strong>说明</strong>：以上为每个数据寄存器的默认作用，但编写汇编代码时并非必须按上述用途使用。</p><h2 id="_2-指针、变址寄存器" tabindex="-1"><a class="header-anchor" href="#_2-指针、变址寄存器"><span>2. 指针、变址寄存器</span></a></h2><ul><li><p><strong>组成</strong>：包括EBP、ESP、ESI、EDI。</p></li><li><p><strong>特点</strong>：可以按照32位或16位进行使用，但无法分割为8位来使用。例如ESI寄存器，能存储32位的指针，其低16位表示为SI，可存储16位的指针，但不能像AX那样拆分成高8位和低8位。</p></li><li><p><strong>用途</strong>：</p><ul><li>EBP：堆栈基址指针寄存器，用于访问堆栈中的数据。</li><li>ESP：专门用作堆栈指针，被形象地称为栈顶指针，配合EBP来访问栈顶数据。</li><li>ESI：源指针寄存器，用于内存数据的传送，DS:ESI指向源串。</li><li>EDI：目的指针寄存器，用于内存数据的传送，DS:EDI指向目的串。</li></ul></li></ul><h2 id="_3-段寄存器" tabindex="-1"><a class="header-anchor" href="#_3-段寄存器"><span>3. 段寄存器</span></a></h2><ul><li><strong>作用</strong>：用于存放段的基地址，段是一块预分配的内存区域。有些段存放程序的指令，有些存放程序的变量，还有堆栈段存放函数变量和函数参数等。</li><li><strong>发展</strong>：在16位CPU中，段寄存器只有4个，分别是CS（代码段）、DS（数据段）、SS（堆栈段）和ES（附加段）。在32位CPU中，段寄存器从4个扩展为6个，分别是CS、DS、SS、ES、FS和GS，其中FS和GS属于附加的段寄存器。</li></ul><h2 id="_4-指令指针寄存器eip" tabindex="-1"><a class="header-anchor" href="#_4-指令指针寄存器eip"><span>4. 指令指针寄存器EIP</span></a></h2><ul><li><p><strong>不同CPU中的名称</strong>：在16位CPU中称为IP，在32位CPU中称为EIP。</p></li><li><p><strong>功能</strong>：保存着下一条要执行的指令的地址（CS:EIP）。</p><ul><li>顺序执行汇编代码时，下一条指令的地址为当前指令的地址加当前指令的长度，即EIP = EIP + 指令长度。</li><li>遇到JMP、JE、LOOP等跳转指令时，会指定EIP的值为跳转目的地，导致CPU执行指令产生跳跃性执行，从而构成分支与循环的程序结构。</li></ul></li></ul><h2 id="_5-标志寄存器" tabindex="-1"><a class="header-anchor" href="#_5-标志寄存器"><span>5. 标志寄存器</span></a></h2><ul><li><p><strong>不同CPU中的名称</strong>：在16位CPU中，标志寄存器称为FLAGS；在32位CPU中，扩展为32位，称为EFLAGS。</p></li><li><p><strong>常见标志位及其含义</strong>：</p><ul><li><strong>OF（溢出标志）</strong> ：运算结果溢出时为1，否则为0。</li><li><strong>DF（方向标志）</strong> ：在串处理指令中用于控制方向。</li><li><strong>IF（中断允许标志）</strong> ：控制是否允许响应外部可屏蔽中断。</li><li><strong>SF（符号标志）</strong> ：运算结果为负时为1，否则为0。</li><li><strong>ZF（零标志）</strong> ：运算结果为0时为1，否则为0。</li><li><strong>AF（辅助进位标志）</strong> ：运算时第3位（半字节）产生进位时为1，否则为0。</li><li><strong>PF（奇偶标志）</strong> ：运算结果中1的个数为偶数时为1，否则为0。</li><li><strong>CF（进位标志）</strong> ：产生进位时为1，否则为0。</li></ul></li></ul><h1 id="寄存器快速记忆表" tabindex="-1"><a class="header-anchor" href="#寄存器快速记忆表"><span>寄存器快速记忆表</span></a></h1><h3 id="一、通用寄存器-32位" tabindex="-1"><a class="header-anchor" href="#一、通用寄存器-32位"><span><strong>一、通用寄存器（32位）</strong></span></a></h3><table><thead><tr><th>寄存器</th><th>字母含义解析</th><th>功能说明</th></tr></thead><tbody><tr><td><strong>EAX</strong></td><td><strong>E</strong>（Extended）扩展，<strong>A</strong>（Accumulator）累加器</td><td>算术运算核心寄存器，支持32/16/8位操作</td></tr><tr><td><strong>EBX</strong></td><td><strong>E</strong>（Extended）扩展，<strong>B</strong>（Base）基址</td><td>存储内存基址或数据</td></tr><tr><td><strong>ECX</strong></td><td><strong>E</strong>（Extended）扩展，<strong>C</strong>（Counter）计数器</td><td>循环计数、移位操作</td></tr><tr><td><strong>EDX</strong></td><td><strong>E</strong>（Extended）扩展，<strong>D</strong>（Data）数据</td><td>I/O端口操作、除法余数</td></tr><tr><td><strong>EBP</strong></td><td><strong>E</strong>（Extended）扩展，<strong>B</strong>（Base）基址，<strong>P</strong>（Pointer）指针</td><td>堆栈基址，访问函数参数和局部变量</td></tr><tr><td><strong>ESP</strong></td><td><strong>E</strong>（Extended）扩展，<strong>S</strong>（Stack）堆栈，<strong>P</strong>（Pointer）指针</td><td>栈顶指针，控制堆栈进出</td></tr><tr><td><strong>ESI</strong></td><td><strong>E</strong>（Extended）扩展，<strong>S</strong>（Source）源，<strong>I</strong>（Index）索引</td><td>串操作源地址指针</td></tr><tr><td><strong>EDI</strong></td><td><strong>E</strong>（Extended）扩展，<strong>D</strong>（Destination）目的，<strong>I</strong>（Index）索引</td><td>串操作目的地址指针</td></tr></tbody></table><h3 id="二、段寄存器-16-32位" tabindex="-1"><a class="header-anchor" href="#二、段寄存器-16-32位"><span><strong>二、段寄存器（16/32位）</strong></span></a></h3><table><thead><tr><th>寄存器</th><th>字母含义解析</th><th>功能说明</th></tr></thead><tbody><tr><td><strong>CS</strong></td><td><strong>C</strong>（Code）代码，<strong>S</strong>（Segment）段</td><td>指向代码段起始地址</td></tr><tr><td><strong>DS</strong></td><td><strong>D</strong>（Data）数据，<strong>S</strong>（Segment）段</td><td>指向数据段起始地址</td></tr><tr><td><strong>SS</strong></td><td><strong>S</strong>（Stack）堆栈，<strong>S</strong>（Segment）段</td><td>指向堆栈段起始地址</td></tr><tr><td><strong>ES</strong></td><td><strong>E</strong>（Extra）附加，<strong>S</strong>（Segment）段</td><td>附加段，用于数据暂存</td></tr><tr><td><strong>FS</strong></td><td><strong>F</strong>（Flat）平坦，<strong>S</strong>（Segment）段</td><td>扁平内存模型的附加段</td></tr><tr><td><strong>GS</strong></td><td><strong>G</strong>（Global）全局，<strong>S</strong>（Segment）段</td><td>全局数据段，多线程中用于TLS</td></tr></tbody></table><h3 id="三、指令指针寄存器" tabindex="-1"><a class="header-anchor" href="#三、指令指针寄存器"><span><strong>三、指令指针寄存器</strong></span></a></h3><table><thead><tr><th>寄存器</th><th>字母含义解析</th><th>功能说明</th></tr></thead><tbody><tr><td><strong>EIP</strong></td><td><strong>E</strong>（Extended）扩展，<strong>I</strong>（Instruction）指令，<strong>P</strong>（Pointer）指针</td><td>存储下一条指令的地址（CS:EIP）</td></tr></tbody></table><h3 id="四、标志寄存器-eflags" tabindex="-1"><a class="header-anchor" href="#四、标志寄存器-eflags"><span><strong>四、标志寄存器（EFLAGS）</strong></span></a></h3><table><thead><tr><th>标志位</th><th>字母含义解析</th><th>功能说明</th></tr></thead><tbody><tr><td><strong>CF</strong></td><td><strong>C</strong>（Carry）进位，<strong>F</strong>（Flag）标志</td><td>无符号数溢出或借位</td></tr><tr><td><strong>PF</strong></td><td><strong>P</strong>（Parity）奇偶，<strong>F</strong>（Flag）标志</td><td>低8位1的个数为偶数时置1</td></tr><tr><td><strong>AF</strong></td><td><strong>A</strong>（Auxiliary）辅助，<strong>C</strong>（Carry）进位，<strong>F</strong>（Flag）标志</td><td>第3位（半字节）进位</td></tr><tr><td><strong>ZF</strong></td><td><strong>Z</strong>（Zero）零，<strong>F</strong>（Flag）标志</td><td>运算结果为0时置1</td></tr><tr><td><strong>SF</strong></td><td><strong>S</strong>（Sign）符号，<strong>F</strong>（Flag）标志</td><td>运算结果为负数时置1</td></tr><tr><td><strong>OF</strong></td><td><strong>O</strong>（Overflow）溢出，<strong>F</strong>（Flag）标志</td><td>有符号数溢出时置1</td></tr><tr><td><strong>DF</strong></td><td><strong>D</strong>（Direction）方向，<strong>F</strong>（Flag）标志</td><td>控制串操作方向（增/减指针）</td></tr></tbody></table><h3 id="记忆技巧" tabindex="-1"><a class="header-anchor" href="#记忆技巧"><span><strong>记忆技巧</strong></span></a></h3><ol><li><p><strong>通用寄存器</strong>：</p><ul><li><strong>E</strong>（Extended）表示32位扩展，后缀如AX、BX等继承自16位寄存器命名</li></ul></li><li><p><strong>段寄存器</strong>：</p><ul><li>后缀<strong>S</strong>（Segment）统一表示段，前缀描述用途</li></ul></li><li><p><strong>标志寄存器</strong>：</p><ul><li>后缀<strong>F</strong>（Flag）表示标志位，前缀描述功能</li></ul></li></ol><h1 id="常用指令" tabindex="-1"><a class="header-anchor" href="#常用指令"><span>常用指令</span></a></h1><h2 id="一、常用指令声明段" tabindex="-1"><a class="header-anchor" href="#一、常用指令声明段"><span>一、常用指令声明段</span></a></h2><table><thead><tr><th><strong>声明段</strong></th><th><strong>含义</strong></th><th><strong>关键特性</strong></th></tr></thead><tbody><tr><td>​<code>.text</code>​</td><td>代码段</td><td>存放可执行程序的指令序列</td></tr><tr><td>​<code>.data</code>​</td><td>数据段</td><td>存放编译时确定的全局数据和已初始化的静态变量</td></tr><tr><td>​<code>.rodata</code>​</td><td>只读数据段</td><td>存放字符串常量、全局<code>const</code>​变量等不可修改数据</td></tr><tr><td>​<code>.bss</code>​</td><td>未初始化数据段</td><td>存放未初始化的全局/静态变量，程序启动时自动清零</td></tr><tr><td>​<code>.comment</code>​</td><td>编译器信息段</td><td>存储编译器版本等元信息</td></tr><tr><td>​<code>.eh_frame</code>​</td><td>异常处理帧信息段</td><td>存储栈展开和异常处理所需的数据结构</td></tr></tbody></table><h2 id="二、数据移动指令" tabindex="-1"><a class="header-anchor" href="#二、数据移动指令"><span>二、数据移动指令</span></a></h2><table><thead><tr><th><strong>指令格式</strong></th><th><strong>功能说明</strong></th><th><strong>操作示例</strong></th></tr></thead><tbody><tr><td>​<code>mov eax, ebx</code>​</td><td>寄存器间数据传输</td><td>将<code>ebx</code>​值复制到<code>eax</code>​</td></tr><tr><td>​<code>push eax</code>​</td><td>数据压入栈顶</td><td>将<code>eax</code>​值存入栈内存</td></tr><tr><td>​<code>pop ebx</code>​</td><td>栈顶数据弹出</td><td>将栈顶数据载入<code>ebx</code>​</td></tr><tr><td>​<code>lea eax, [ebx+4]</code>​</td><td>计算有效地址（非内存数据）</td><td>将<code>ebx+4</code>​的地址赋给<code>eax</code>​</td></tr></tbody></table><h2 id="三、逻辑运算指令" tabindex="-1"><a class="header-anchor" href="#三、逻辑运算指令"><span>三、逻辑运算指令</span></a></h2><table><thead><tr><th><strong>指令格式</strong></th><th><strong>运算类型</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td>​<code>add eax, ecx</code>​</td><td>算术运算</td><td>​<code>eax = eax + ecx</code>​</td></tr><tr><td>​<code>sub eax, ecx</code>​</td><td>算术运算</td><td>​<code>eax = eax - ecx</code>​</td></tr><tr><td>​<code>inc eax</code>​</td><td>算术运算</td><td>​<code>eax = eax + 1</code>​</td></tr><tr><td>​<code>dec eax</code>​</td><td>算术运算</td><td>​<code>eax = eax - 1</code>​</td></tr><tr><td>​<code>and/or/xor</code>​</td><td>位运算</td><td>按位与/或/异或</td></tr><tr><td>​<code>shl/shr</code>​</td><td>位移运算</td><td>左移/右移（空位补0）</td></tr></tbody></table><h2 id="四、流程控制指令" tabindex="-1"><a class="header-anchor" href="#四、流程控制指令"><span>四、流程控制指令</span></a></h2><table><thead><tr><th><strong>指令格式</strong></th><th><strong>功能说明</strong></th><th><strong>寄存器约束</strong></th></tr></thead><tbody><tr><td>​<code>jmp &lt;label&gt;</code>​</td><td>无条件跳转到指定地址</td><td>隐式修改EIP</td></tr><tr><td>​<code>je/jne/jg/jl...</code>​</td><td>条件跳转（相等/不等/大于/小于等）</td><td>根据标志寄存器状态跳转</td></tr><tr><td>​<code>call func</code>​</td><td>调用函数</td><td>将返回地址压栈并跳转到函数入口</td></tr><tr><td>​<code>ret</code>​</td><td>函数返回</td><td>从栈中弹出返回地址并跳转</td></tr></tbody></table><blockquote><p><strong>注</strong>：EIP寄存器存储下一条指令地址，只能通过流程控制指令间接修改。</p></blockquote><h1 id="逆向工具" tabindex="-1"><a class="header-anchor" href="#逆向工具"><span>逆向工具</span></a></h1><h2 id="一、二进制文件工具" tabindex="-1"><a class="header-anchor" href="#一、二进制文件工具"><span><strong>一、二进制文件工具</strong></span></a></h2><h3 id="studype" tabindex="-1"><a class="header-anchor" href="#studype"><span><strong>StudyPE</strong></span></a></h3><ul><li><p><strong>PE结构解析</strong>：深度解析DOS头、NT头（文件头、可选头）、节表（Section Table）、导入表（IAT）、导出表（EAT）、资源表等。</p></li><li><p><strong>特征识别</strong>：检测加壳（如UPX、ASPack）、识别编译器类型（VC++、Delphi）、分析重定位表。</p></li><li><p><strong>动态支持</strong>：支持插件扩展（如查看TLS回调函数、解析.NET元数据）。</p></li><li><p><strong>典型场景</strong>：</p><ul><li>分析勒索病毒入口点（EntryPoint）偏移，定位加密函数起始位置。</li><li>验证数字签名是否被篡改（对比证书哈希与PE结构中的签名数据）。</li></ul></li></ul><h3 id="_010-editor" tabindex="-1"><a class="header-anchor" href="#_010-editor"><span><strong>010 Editor</strong></span></a></h3><ul><li><p><strong>核心功能</strong>：</p><ul><li><strong>模板化解析</strong>：内置50+文件模板（ELF、PDF、JPEG、ZIP），可自定义模板解析未知二进制结构。</li><li><strong>脚本引擎</strong>：支持JavaScript脚本批量处理数据（如自动修复CRC32校验和）。</li><li><strong>高级操作</strong>：文件差异对比（Byte-Level Diff）、磁盘扇区编辑、正则表达式搜索二进制模式。</li></ul></li><li><p><strong>典型场景</strong>：</p><ul><li>逆向工程中解析安卓APK的DEX文件头，提取类加载器信息。</li><li>修复因传输损坏的RAR文件（定位并修补缺失的文件头标记）。</li></ul></li></ul><h3 id="winhex" tabindex="-1"><a class="header-anchor" href="#winhex"><span><strong>WinHex</strong></span></a></h3><ul><li><p><strong>核心功能</strong>：</p><ul><li><strong>磁盘级操作</strong>：支持RAID重组、内存镜像（RAM Dump）解析、FAT/NTFS文件系统底层访问。</li><li><strong>数据恢复</strong>：通过特征码（如文件头签名）恢复被格式化的JPEG、DOCX文件。</li><li><strong>取证功能</strong>：提取浏览器Cookie、分析$MFT元文件记录追踪文件删除痕迹。</li></ul></li><li><p><strong>典型场景</strong>：</p><ul><li>从损坏的U盘中提取比特币钱包文件（搜索特定HEX特征码）。</li><li>分析勒索病毒加密后的文件熵值变化，判断加密算法强度。</li></ul></li></ul><h3 id="ultraedit" tabindex="-1"><a class="header-anchor" href="#ultraedit"><span><strong>UltraEdit</strong></span></a></h3><ul><li><p><strong>核心功能</strong>：</p><ul><li><strong>混合编辑</strong>：同时支持文本（UTF-8/GBK/Unicode）与二进制模式切换编辑。</li><li><strong>列模式</strong>：块状选择编辑（用于批量修改固件中的配置参数）。</li><li><strong>集成开发</strong>：语法高亮（500+语言）、SSH/Telnet远程文件编辑、Git版本控制。</li></ul></li><li><p><strong>典型场景</strong>：</p><ul><li>修改游戏存档文件中的数值（如金币数量、角色属性）。</li><li>快速定位嵌入式设备固件中的硬编码密码（通过正则表达式搜索关键词）。</li></ul></li></ul><h2 id="二、静态分析工具" tabindex="-1"><a class="header-anchor" href="#二、静态分析工具"><span><strong>二、静态分析工具</strong></span></a></h2><ul><li><p><strong>定义</strong>：在不运行程序的情况下，通过逆向工程手段（如反汇编、反编译）分析代码结构和逻辑。</p></li><li><p><strong>技术特点</strong>：</p><ul><li>依赖二进制文件的反汇编结果（如IDA生成的伪代码）。</li><li>分析控制流、函数调用关系、字符串及加密算法等静态特征。</li><li>适用于漏洞挖掘、恶意代码分析及代码审计。</li></ul></li><li><p><strong>局限性</strong>：无法获取运行时数据（如动态内存分配、加密密钥生成）。</p></li></ul><h3 id="ida-pro" tabindex="-1"><a class="header-anchor" href="#ida-pro"><span><strong>IDA Pro</strong></span></a></h3><ul><li><p><strong>核心功能</strong>：</p><ul><li><strong>反编译引擎</strong>：支持x86/ARM/MIPS/PowerPC等50+处理器架构，生成类C伪代码（F5插件）。</li><li><strong>图形化分析</strong>：生成函数调用图（Call Graph）、控制流图（CFG）、交叉引用（Xrefs）追踪。</li><li><strong>插件生态</strong>：集成Binary Ninja脚本、Ghidra协同分析、Python API自动化分析。</li></ul></li><li><p><strong>典型场景</strong>：</p><ul><li>逆向分析物联网设备固件，定位缓冲区溢出漏洞（如strcpy未校验长度）。</li><li>解密APT攻击样本中的C2通信协议（通过反编译RC4加密函数）。</li></ul></li></ul><h2 id="三、动态调试工具" tabindex="-1"><a class="header-anchor" href="#三、动态调试工具"><span><strong>三、动态调试工具</strong></span></a></h2><ul><li><p>通过运行程序并实时监控其执行流程，观察内存、寄存器及交互行为。</p></li><li><p><strong>技术特点</strong>：</p><ul><li>使用调试器（如OllyDbg）设置断点、修改寄存器和内存值。</li><li>跟踪程序对系统API的调用、网络通信、文件操作等动态行为。</li><li>适用于漏洞利用开发、协议逆向及绕过反调试机制。</li></ul></li><li><p><strong>局限性</strong>：可能触发反调试检测，且需处理程序运行的环境依赖性。</p></li></ul><h3 id="ollydbg" tabindex="-1"><a class="header-anchor" href="#ollydbg"><span><strong>OllyDbg</strong></span></a></h3><ul><li><p><strong>核心功能</strong>：</p><ul><li><strong>实时调试</strong>：硬件断点、内存断点、条件断点（如EIP=0x401000时暂停）。</li><li><strong>行为监控</strong>：记录API调用序列（如CreateFileA、WriteProcessMemory）、DLL注入追踪。</li><li><strong>内存操作</strong>：实时修改寄存器值、Patch指令（如NOP掉许可证校验指令）。</li></ul></li><li><p><strong>典型场景</strong>：</p><ul><li>动态脱壳：跟踪UPX压缩代码的解压过程，定位原始代码段（OEP）。</li><li>绕过软件试用期：拦截GetLocalTime系统调用，篡改时间返回值。</li></ul></li></ul><p>‍</p>',115)]))}]]),p=JSON.parse('{"path":"/net/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80.html","title":"逆向工程基础","lang":"zh-CN","frontmatter":{"title":"逆向工程基础","index":true,"order":10,"isOriginal":true,"category":["计网基础"],"tag":["逆向","逆向工程","IDA","反编译","汇编"],"description":"逆向工程 一、逆向工程定义 逆向工程（Software Reverse Engineering），又称软件反向工程，从可运行的程序系统出发，运用解密、反汇编、系统分析、程序算法理解等多种计算机技术，对软件的结构、流程、代码等进行逆向拆解和分析，推导软件产品的源代码、设计原理、结构、算法、处理过程、运行方法及相关文档等。 二、CTF竞赛中的逆向 涉及Wi...","head":[["meta",{"property":"og:url","content":"https://youze27.github.io/blog/net/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"卷卷"}],["meta",{"property":"og:title","content":"逆向工程基础"}],["meta",{"property":"og:description","content":"逆向工程 一、逆向工程定义 逆向工程（Software Reverse Engineering），又称软件反向工程，从可运行的程序系统出发，运用解密、反汇编、系统分析、程序算法理解等多种计算机技术，对软件的结构、流程、代码等进行逆向拆解和分析，推导软件产品的源代码、设计原理、结构、算法、处理过程、运行方法及相关文档等。 二、CTF竞赛中的逆向 涉及Wi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-13T16:04:52.000Z"}],["meta",{"property":"article:tag","content":"逆向"}],["meta",{"property":"article:tag","content":"逆向工程"}],["meta",{"property":"article:tag","content":"IDA"}],["meta",{"property":"article:tag","content":"反编译"}],["meta",{"property":"article:tag","content":"汇编"}],["meta",{"property":"article:modified_time","content":"2025-07-13T16:04:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"逆向工程基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-13T16:04:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"卷卷\\"}]}"]]},"headers":[{"level":2,"title":"一、逆向工程定义","slug":"一、逆向工程定义","link":"#一、逆向工程定义","children":[]},{"level":2,"title":"二、CTF竞赛中的逆向","slug":"二、ctf竞赛中的逆向","link":"#二、ctf竞赛中的逆向","children":[]},{"level":2,"title":"三、逆向工程的用途","slug":"三、逆向工程的用途","link":"#三、逆向工程的用途","children":[]},{"level":2,"title":"四、静态分析技术","slug":"四、静态分析技术","link":"#四、静态分析技术","children":[{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]}]},{"level":2,"title":"五、动态调试技术","slug":"五、动态调试技术","link":"#五、动态调试技术","children":[{"level":3,"title":"定义","slug":"定义-1","link":"#定义-1","children":[]},{"level":3,"title":"优点","slug":"优点-1","link":"#优点-1","children":[]},{"level":3,"title":"一. 定义与本质","slug":"一-定义与本质","link":"#一-定义与本质","children":[]},{"level":3,"title":"二. 加壳原理","slug":"二-加壳原理","link":"#二-加壳原理","children":[]}]},{"level":2,"title":"三、壳的分类与技术对比","slug":"三、壳的分类与技术对比","link":"#三、壳的分类与技术对比","children":[]},{"level":2,"title":"一、编译全过程总览","slug":"一、编译全过程总览","link":"#一、编译全过程总览","children":[]},{"level":2,"title":"二、核心步骤","slug":"二、核心步骤","link":"#二、核心步骤","children":[{"level":3,"title":"1. 预处理（Preprocessing）","slug":"_1-预处理-preprocessing","link":"#_1-预处理-preprocessing","children":[]},{"level":3,"title":"2. 编译（Compilation）","slug":"_2-编译-compilation","link":"#_2-编译-compilation","children":[]},{"level":3,"title":"3. 汇编（Assembly）","slug":"_3-汇编-assembly","link":"#_3-汇编-assembly","children":[]},{"level":3,"title":"4. 链接（Linking）","slug":"_4-链接-linking","link":"#_4-链接-linking","children":[]}]},{"level":2,"title":"常用寄存器分类","slug":"常用寄存器分类","link":"#常用寄存器分类","children":[]},{"level":2,"title":"1. 数据寄存器","slug":"_1-数据寄存器","link":"#_1-数据寄存器","children":[]},{"level":2,"title":"2. 指针、变址寄存器","slug":"_2-指针、变址寄存器","link":"#_2-指针、变址寄存器","children":[]},{"level":2,"title":"3. 段寄存器","slug":"_3-段寄存器","link":"#_3-段寄存器","children":[]},{"level":2,"title":"4. 指令指针寄存器EIP","slug":"_4-指令指针寄存器eip","link":"#_4-指令指针寄存器eip","children":[]},{"level":2,"title":"5. 标志寄存器","slug":"_5-标志寄存器","link":"#_5-标志寄存器","children":[{"level":3,"title":"一、通用寄存器（32位）","slug":"一、通用寄存器-32位","link":"#一、通用寄存器-32位","children":[]},{"level":3,"title":"二、段寄存器（16/32位）","slug":"二、段寄存器-16-32位","link":"#二、段寄存器-16-32位","children":[]},{"level":3,"title":"三、指令指针寄存器","slug":"三、指令指针寄存器","link":"#三、指令指针寄存器","children":[]},{"level":3,"title":"四、标志寄存器（EFLAGS）","slug":"四、标志寄存器-eflags","link":"#四、标志寄存器-eflags","children":[]},{"level":3,"title":"记忆技巧","slug":"记忆技巧","link":"#记忆技巧","children":[]}]},{"level":2,"title":"一、常用指令声明段","slug":"一、常用指令声明段","link":"#一、常用指令声明段","children":[]},{"level":2,"title":"二、数据移动指令","slug":"二、数据移动指令","link":"#二、数据移动指令","children":[]},{"level":2,"title":"三、逻辑运算指令","slug":"三、逻辑运算指令","link":"#三、逻辑运算指令","children":[]},{"level":2,"title":"四、流程控制指令","slug":"四、流程控制指令","link":"#四、流程控制指令","children":[]},{"level":2,"title":"一、二进制文件工具","slug":"一、二进制文件工具","link":"#一、二进制文件工具","children":[{"level":3,"title":"StudyPE","slug":"studype","link":"#studype","children":[]},{"level":3,"title":"010 Editor","slug":"_010-editor","link":"#_010-editor","children":[]},{"level":3,"title":"WinHex","slug":"winhex","link":"#winhex","children":[]},{"level":3,"title":"UltraEdit","slug":"ultraedit","link":"#ultraedit","children":[]}]},{"level":2,"title":"二、静态分析工具","slug":"二、静态分析工具","link":"#二、静态分析工具","children":[{"level":3,"title":"IDA Pro","slug":"ida-pro","link":"#ida-pro","children":[]}]},{"level":2,"title":"三、动态调试工具","slug":"三、动态调试工具","link":"#三、动态调试工具","children":[{"level":3,"title":"OllyDbg","slug":"ollydbg","link":"#ollydbg","children":[]}]}],"git":{"createdTime":1752422692000,"updatedTime":1752422692000,"contributors":[{"name":"youze","username":"youze","email":"youze27@163.com","commits":1,"url":"https://github.com/youze"}]},"readingTime":{"minutes":16.3,"words":4891},"filePathRelative":"net/逆向工程基础.md","localizedDate":"2025年7月13日","excerpt":"\\n<h2>一、逆向工程定义</h2>\\n<p>逆向工程（Software Reverse Engineering），又称软件反向工程，从可运行的程序系统出发，运用解密、反汇编、系统分析、程序算法理解等多种计算机技术，对软件的结构、流程、代码等进行逆向拆解和分析，推导软件产品的源代码、设计原理、结构、算法、处理过程、运行方法及相关文档等。</p>\\n<h2>二、CTF竞赛中的逆向</h2>\\n<ul>\\n<li>涉及Windows、Linux、Android平台的多种编程技术。</li>\\n<li>要求利用常用工具对源代码及二进制文件进行逆向分析。</li>\\n<li>掌握Android移动应用APK文件的逆向分析，掌握加解密、内核编程、算法反调试和代码混淆技术。</li>\\n</ul>","autoDesc":true}')},61792:(s,i)=>{i.A=(s,i)=>{const t=s.__vccOpts||s;for(const[s,n]of i)t[s]=n;return t}}}]);